gaussian_parser.cpp
#include "gaussian_parser.hpp"
#include <fstream>
#include <sstream>
#include <string>
#include <iostream> // 可选，用于调试

std::vector<Gradient> parse_gradient(const std::string& filename) {
    std::ifstream fin(filename);
    if (!fin.is_open()) {
        std::cerr << "Error opening file: " << filename << std::endl;
        return {};
    }

    std::vector<Gradient> gradients;
    std::string line;
    bool inForcesBlock = false;  // 标记是否进入 Forces 数据块

    while (std::getline(fin, line)) {
        // 1) 检测到 "Forces (Hartrees/Bohr)" 则进入数据块
        if (line.find("Forces (Hartrees/Bohr)") != std::string::npos) {
            inForcesBlock = true;
            continue;
        }

        // 2) 如果已经在 Forces 数据块里，需要跳过表头和分隔符
        if (inForcesBlock) {
            // 跳过标题/分隔符等行
            // 例如 " Center     Atomic ... " 或 " ---- " 或空行等
            if (line.find("Center") != std::string::npos)       continue;
            if (line.find("Number") != std::string::npos)       continue;
            if (line.find("----")   != std::string::npos)       continue;
            if (line.empty())                                    continue;

            // 如果遇到 "Cartesian Forces:"，说明梯度表结束
            if (line.find("Cartesian Forces:") != std::string::npos) {
                break;  // 结束解析
            }

            // 3) 尝试解析一行数据
            std::istringstream iss(line);
            int centerIndex, atomicNumber;
            double fx, fy, fz;
            // 格式通常是: [中心序号] [原子序号] [Fx] [Fy] [Fz]
            if (iss >> centerIndex >> atomicNumber >> fx >> fy >> fz) {
                // 将解析到的梯度信息存入容器
                gradients.push_back({fx, fy, fz});
            } else {
                // 如果无法解析，可能是行尾或意外格式，可选择继续或 break
                continue;
            }
        }
    }

    return gradients;
}
gaussian_parser.hpp
  #pragma once
#include <vector>  // 包含 vector 头文件
#include <string>
#include "optimizer.hpp"

// // 定义 Gradient 结构体
// struct Gradient {
//     double fx;
//     double fy;
//     double fz;
// };

// 函数声明
std::vector<Gradient> parse_gradient(const std::string& filename);
